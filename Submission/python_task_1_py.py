# -*- coding: utf-8 -*-
"""python_task_1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJ2SpMzLuQKAB1QLi_24EgQfYEljGxtn

##Python_task_1

##Question 1: Car Matrix Generation
"""

import pandas as pd

def generate_car_matrix(df: pd.DataFrame) -> pd.DataFrame:
   # Assuming 'id_1', 'id_2', and 'car' are columns in the DataFrame
    matrix = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)

    # Set diagonal values to 0
    for i in range(len(matrix.index)):
        matrix.iloc[i, i] = 0

    return matrix

# Example usage:
# Assuming 'your_dataset.csv' is loaded into a DataFrame named 'df'
df = pd.read_csv('/content/dataset-1.csv')
car_matrix_result = generate_car_matrix(df)
print(car_matrix_result)

"""##Question 2: Car Type Count Calculation"""

def add_car_type_column_and_save(dataframe, file_path='dataset-1.csv'):
    # Add a new column 'car_type' based on conditions
    dataframe['car_type'] = pd.cut(dataframe['car'],
                                   bins=[-float('inf'), 15, 25, float('inf')],
                                   labels=['low', 'medium', 'high'],
                                   include_lowest=True, right=True)

    # Calculate the count of occurrences for each car_type category
    type_counts = dataframe['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_counts = dict(sorted(type_counts.items()))

    # Save the DataFrame with the added 'car_type' column to the specified file
    dataframe.to_csv(file_path, index=False)

    # Print the updated DataFrame
    print(dataframe)

    return sorted_type_counts

# Assuming your DataFrame is named 'df'
# Load the dataset-1.csv into a DataFrame
df = pd.read_csv('dataset-1.csv')

# Call the function with the DataFrame and save the updated DataFrame to 'dataset-1.csv'
result = add_car_type_column_and_save(df)

# Print the result
print(result)

"""##Question 3: Bus Count Index Retrieval"""

def get_bus_indexes(dataframe):
    # Calculate the mean value of the 'bus' column
    bus_mean = dataframe['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indices = dataframe[dataframe['bus'] > 2 * bus_mean].index.tolist()

    # Sort the indices in ascending order
    bus_indices.sort()

    return bus_indices


# Load the dataset-1.csv into a DataFrame
df = pd.read_csv('dataset-1.csv')

# Call the function and print the result
result = get_bus_indexes(df)
print(result)

"""##Question 4: Route Filtering"""

def filter_routes(file_path):
    # Load the dataset from the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Calculate the average value of the 'truck' column for each route
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average truck value is greater than 7
    filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of filtered routes
    filtered_routes.sort()

    return filtered_routes

# Provide the file path to the dataset-1.csv
file_path = 'dataset-1.csv'

# Call the function and print the result
result = filter_routes(file_path)
print(result)

"""##Question 5: Matrix Value Modification"""

def multiply_matrix(matrix: pd.DataFrame) -> pd.DataFrame:

    # Copy the input matrix to avoid modifying the original DataFrame
    modified_matrix = matrix.copy()

    # Apply the specified logic to each value in the matrix
    for column in modified_matrix.columns:
        for index in modified_matrix.index:
            value = modified_matrix.loc[index, column]

            if value > 20:
                modified_matrix.loc[index, column] = round(value * 0.75, 1)
            else:
                modified_matrix.loc[index, column] = round(value * 1.25, 1)

    return modified_matrix


modified_car_matrix = multiply_matrix(car_matrix_result)
print(modified_car_matrix)

"""##Question 6: Time Check"""

def check_time_completeness(df):
    # Combine date and time columns into a single timestamp column
    df['start_timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'], errors='coerce')
    df['end_timestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'], errors='coerce')

    # Create a mask for entries with incorrect timestamps
    mask = ~(
        (df['start_timestamp'].dt.time == pd.Timestamp('00:00:00').time()) &
        (df['end_timestamp'].dt.time == pd.Timestamp('23:59:59').time()) &
        (df['start_timestamp'].dt.dayofweek == 0) &
        (df['end_timestamp'].dt.dayofweek == 6)
    )

    # Group by (id, id_2) and check if any entry in the group has incorrect timestamps
    result_series = df.groupby(['id', 'id_2'])['start_timestamp', 'end_timestamp'].apply(lambda x: any(mask.loc[x.index]))

    return result_series

df = pd.read_csv('/content/dataset-2.csv')
result = check_time_completeness(df)
incorrect_timestamps = result[result].reset_index()
print(incorrect_timestamps)